import chai, {
	assert,
	expect
} from 'chai';
import path from 'path';
import API from '../src';

const should = chai.should();
let audible, userToken, appID;

describe('API', () => {
	before(() => {
		  const token = require('../auth/token');
			const config = require('../auth/config');

			if(!config.app){
				throw new Error("Application ID is not defined in auth config file.");
			}

			if(!token.key){
				throw new Error("Token ID is not defined or not valid. Authenticate to run Test Suite");
			}

			appID = config.app;
			userToken = token.key;
    });
	describe('Authentication', () => {


		it('Should Initialize object with tokens', () => {
			audible = new API(userToken, appID);
			should.equal(audible.customerToken, userToken);
			should.equal(audible.applicationID, appID);
		});

		it('Should Authenticate to API', (done) => {
			let res;

			audible = new API(userToken, appID);
			should.exist(audible.getUserProfile);
			audible.getUserProfile()
				.then((results, status) => {
					should.exist(results.data.name);
					should.exist(results.data.email);
					done();
				}).catch((er) => {
					assert.fail(er);
					done();
				});

		});


	});

	describe('Catalog', () => {

		beforeEach(() => {
			audible = new API(userToken, appID);
		});

		it("Should get an Array of Master Categories", (done) => {
			audible.getCategories()
				.then((results) => {
					let res = results.data.categories[1].children;
					should.exist(res);
					done();
				})
				.catch((error) => {
					assert.fail(error);
					done();
				});
		});

		it("Should get an Array of Master Channels", (done) => {
			audible.getChannels()
				.then(function(results, status) {
					let res = results.data.categories[1].children;
					should.exist(res);
					done();
				})
				.catch(function(error) {
					assert.fail(error);
					done();
				});
		});

		it("Should get an Array of Categories and Products", (done) => {
			audible.getCategory("14067103011", ["product_desc", "always-returned", "contributors", "products", "category_metadata", "category_media"])
				.then(r => {
					should.exist(r.data.category.children);
					done();
				})
				.catch(er => {
					assert.fail(error);
					done();
				});
		});

	});

	describe('Library', () => {
		audible = new API(userToken, appID);
		let returned_data;

		it("Should get User's Library", (done) => {
			audible.getLibraryBooks('06/18/2014')
				.then(function(results, status) {
					should.exist(results.data.books.book);
					returned_data = results.data.books.book;
					done();
				})
				.catch(er => {
					assert.fail(error);
					done();
				});
		});

		it("Users Library should be cachable", () => {
			audible.getLibraryBooks('06/18/2014')
				.then(function(results, status) {
					should.equal(returned_data,results.data.books.book);
					//done();
				})
				.catch(er => {
					assert.fail(error);
					//done();
				});
		});

		it("User's Library should be releasable", (done) => {
			audible.caching = false;
			audible.getLibraryBooks('06/18/2014')
				.then(function(results, status) {
					should.exist(results.data.books.book);
					done();
				})
				.catch(er => {
					assert.fail(error);
					done();
				});
		});
	});

	describe('Product', () => {

		it("Should get Product Data with a Provided ASIN", (done) => {

			audible.getProduct('B002V1NHYC', ["product_desc", "always-returned", "media", "sample", "contributors", "sku", "price"])
				.then(function(results, status) {
					should.exist(results.data.product);
					done();
				})
				.catch(function(error) {
					assert.fail(error);
					done();
				});

		});

		it("Should get User's Product recommendations", (done) => {
			audible.getProductRecomendations()
				.then(function(results, status) {
					should.exist(results.data.recommendations);
					done();
				})
				.catch(function(error) {
					assert.fail(er);
					done();
				});
		});

		it("Should get Product Stream URL",(done)=>{
			audible.getProductStream("B002V1NHYC")
			.then(function(results,status){
				should.exist(results.data.content_license.license_response);
				done();
			})
			.catch(function(error) {
				assert.fail(er);
				done();
			});
		});

		it("Should get Product Metadata",(done)=>{
			audible.getProductMetadata("B002UZJGYY","chapter_info")
			.then(function(results,status){
				should.exist(results.data.content_metadata);
				done();
			})
			.catch(function(error) {
				assert.fail(er);
				done();
			});
		});

		it("Should get Product Recommendations",(done)=>{
			audible.getProductRecomendations()
			.then(function(results,status){
				should.exist(results.data.recommendations);
				done();
			})
			.catch(function(error) {
				assert.fail(er);
				done();
			});
		});

		it("Should get Similar Product",(done)=>{
			audible.getSimilarProducts('B002V1NHYC')
			.then(function(results,status){
				should.exist(results.data.similar_products);
				done();
			})
			.catch(function(error) {
				assert.fail(er);
				done();
			});
		});

		it("Should get Product Reviews",(done)=>{
			audible.getProductReviews("B002V1NHYC")
			.then(function(results,status){
				should.exist(results.data.customer_reviews);
				done();
			})
			.catch(function(error) {
				assert.fail(er);
				done();
			});
		});

		it("Should get Product Last Position",(done)=>{
			audible.getProductsLastPosition("B002V1NHYC")
			.then(function(results,status){
				should.exist(results.data.asin_last_position_heard_annots);
				done();
			})
			.catch(function(error) {
				assert.fail(er);
				done();
			});
		});


	});

});
//
