import ClientAPI, {VERB,MARKETS,VERSION}  from './client';

class AudibleAPI extends ClientAPI{

	/**
	* Retrieves a tree of available categories in the MarketPlace. (Marketplace defined by api env)
  * http://platform.audible.com/audible-api/API_GetCategoryById.html
	* @param {String} response_groups
  * @param {Object} extra parameters in the request
	* @return {Promise} Returns the fetched three.
	*/
  getCategories(response_groups,options){
		return this.request('catalog/categories',response_groups,VERB.GET,false,options);
  }

  /**
  * Retrieves All Channels Available in the MarketPlace. (Marketplace defined by api env)
  * http://platform.audible.com/audible-api/API_GetCategoryById.html
  * @param {String} response_groups
  * @param {Object} extra parameters in the request
  * @return {Promise} Returns the fetched categories.
  */
  getChannels(response_groups,options = {},uncached=null){
    let param = {root:'ShortsCurated',categories_num_levels:2};
    return this.request('catalog/categories',response_groups,VERB.GET,false,Object.assign(options,{params:param}),uncached);
  }

 /**
 * Retrieves a specific category from the CategorieID Prodived
 * http://platform.audible.com/audible-api/API_GetCategoryById.html
 * @param {String} categorieID
 * @param {String} response_groups
 * @param {Object} extra parameters in the request
 * @return {Promise} Returns the fetched subcategories.
 */
	getCategory(categorieID,response_groups,options={}){
		return this.request(`catalog/categories/${categorieID}`,response_groups,VERB.GET,false,options);
	}

	/**
  * Retrieves specific product information from an asin
  * http://platform.audible.com/audible-api/API_GetProduct.html
  * @param {String} asin
  * @param {String} response_groups
  * @param {Object} extra parameters in the request
  * @return {Promise} Returns the fetched subcategories.
  */
  getProduct(asin,response_groups,options){ //response_groups = sku,product_desc,contributors
    return this.request(`catalog/products/${asin}`,response_groups,VERB.GET,false,options);
  }

	/**
  * Retrieves a collection of products based on the search criteria.
  * http://platform.audible.com/audible-api/API_GetProducts.html
  * @param {Object} search parameters
  * @param {String} response_groups
  * @param {Object} extra parameters in the request
  * @return {Promise} Returns the fetched subcategories.
  */
	searchProducts(searchParameters,response_groups,options={}){
		return this.request('catalog/products',response_groups,VERB.GET,false,Object.assign({'params':searchParameters},options));
	}


  /**
  * Retrieves reviews from an Asin
  * http://platform.audible.com/audible-api/API_GetContentMetadata.html
  * @param {asin} Asin
  * @param {String} Response groups
  * @param {Object} extra parameters in the request
  * @return {Promise} Returns the fetched subcategories.
  */
  getProductReviews(asin,response_groups,options,uncached){
    return this.request(`catalog/products/${asin}/reviews`,response_groups,VERB.GET,true,options,uncached);
  }


  /**
  * Retrieves books from library purchased from set date. REQUIRES AUTHENTICATION
  * @param {Object} search parameters
  * @return {Promise} Returns the fetched subcategories.
  */
  getLibraryBooks(purchaseAfterDate,uncached){  //resource,option,parameters,verb,data
    return this.request(null, // as it uses dev server
                        null,
                        VERB.GET,
                        true ,
                        { url:`${MARKETS.US}${VERSION.dev}/library/books`,
                          timeout: 2500,
                          params:{purchaseAfterDate:purchaseAfterDate, response_groups:'media'}
                        },uncached
                       );
  }

  /**
  * Retrieves a collection of products based on the search criteria. REQUIRES AUTHENTICATION
  * http://platform.audible.com/audible-api/API_GetContentLicense.html
  * @param {String} Asin
  * @param {String} DRM Type
  * @param {String} Consumption Type
  * @return {Promise} Returns the fetched subcategories.
  */
	getProductStream(asin,drm_type,consumption_type){
    let drm = drm_type ? drm_type : 'Hls';
    let type = consumption_type ? consumption_type: 'Streaming';

		return this.request(`content/${asin}/licenserequest`,
          							null,
          							VERB.POST,
          							true,
          							{data:JSON.stringify({"consumption_type":type,"drm_type":drm})}
												);
	}

	/**
  * Retrieves a collection of products based on the search criteria. REQUIRES AUTHENTICATION
  * http://platform.audible.com/audible-api/API_GetLastPositionHeardAnnotations.html
  * @param {string} Asin
  * @param {Object} search parameters
  * @return {Promise} Returns the fetched subcategories.
  */
	getProductsLastPosition(asin,options={}){

		return this.request(`annotations/lastpositions`, // Action
												null,
												VERB.GET, // Get Verb
												true, // Required Headers
                        Object.assign({params:{asins:asin}},options),
                        true
											 );
	}

	/**
	* Retrieves a collection of products based on the search criteria. REQUIRES AUTHENTICATION
  * http://platform.audible.com/audible-api/API_GetContentMetadata.html
  * @param {asin} Asin
	* @param {String} Response groups
  * @param {Object} extra parameters in the request
	* @return {Promise} Returns the fetched subcategories.
	*/
	getProductMetadata(asin,response_groups,options){
		return this.request(`content/${asin}/metadata`,response_groups,VERB.GET,true,options,true);
	}

  /**
  * Retrieves a collection of products based on the search criteria. REQUIRES AUTHENTICATION
  * http://platform.audible.com/audible-api/API_GetRecommendations.html
  * @param {Object} response parameters
  * @param {Number} number of results
  * @param {Object} extra parameters in the request
  * @return {Promise} Returns the fetched subcategories.
  */
  getProductRecomendations(response_groups,results,options={}){
    return this.request('recommendations',response_groups,VERB.GET,true,Object.assign({"params":{"num_results":results}},options),true);
  }

  /**
  * Retrieves a list of similar product to the given product (specified by its ASIN).
  * http://platform.audible.com/audible-api/API_GetRecommendations.html
  * @param {String} Identifier of the product to which similar products will be retrieved.
  * @param {Array} Response Group Definition
  * @param {Object} extra parameters in the request
  * @return {Promise} Returns the fetched subcategories.
  */
  getSimilarProducts(asin,response_groups,options,uncached){
    return this.request(`catalog/products/${asin}/sims`,response_groups,VERB.GET,false,options,uncached);
  }

  /**
  * Retrieves user profile information.
  * @return {Promise} Returns the fetched subcategories.
  */
  getUserProfile(){
    var options = {
      url: "https://api.amazon.com/user/profile",
    };
    return this.request('',null,VERB.GET,true,options);
  }

}

export default AudibleAPI;
