
import rq from "axios";
import ch from "felix";

/**
* Available Versions
*/
const VERSION ={
	"stable": "1.0",
	"dev": "0.0"
};

/**
* Available Environment
*/
const MARKETS ={
	'US': "https://api.audible.com/",
	'UK': "https://api.audible.co.uk/",
	'FR': "https://api.audible.fr/",
	'DE': "https://api.audible.de/",
	'JP': "https://api.audible.co.jp/",
	'IT': "https://api.audible.it/",
	'AU': "https://api.audible.com.au/"
};

/**
* Available Verbs
*/

const VERB = {
	GET : "get",
	POST: "post",
	PUT: "put",
	DELETE: "delete"
};

/**
* @class ClientAPI
* Base for Audible API Client. It implements axios fetcher.
* https://www.npmjs.com/package/axios
* https://github.com/mzabriskie/axios/blob/master/LICENSE
*/
class ClientAPI{
		constructor(customerID,appID,market,version){
			this.cache = ch.create(customerID);
			this.env = `${(market || MARKETS.US)}/${(version || VERSION.stable )}/`;
			this.cToken = customerID;
			this.appID = appID;
			this.debug = false;
			this.caching = true;
			this.default ={
				"verb": VERB.GET
			};

		}

		get customerToken(){
			return this.cToken;
		}

		get Environment(){
			return this.env;
		}

		get applicationID(){
			return this.appID;
		}

		isCaching(){
			return this.caching;
		}


		/**
		* Async Fetcher
		*
		* @param {String} Action to Perform
		* @param {Object} Response Groups
		* @param {String} Method to Execute
		* @param {Boolean} Authenticate
		* @param {Object} Option parameter to Axios
		* @return {Promise} Object With Status and Data
		*/
		request(action,response_groups,verb,authenticate,extras,uncached){

			let parameters = {};
			if(response_groups){
					response_groups = (response_groups instanceof Array) ? response_groups.join(',') : response_groups;
					parameters = {'response_groups':response_groups};
			}

			let options = {url:this.env+action, method: verb || this.default.verb, timeout: 1500, params: parameters};

			options.headers = {"Content-Type": "application/json", 'Accept': "application/json"};

			if(authenticate) Object.assign(options.headers,this.authenticate());

			if(extras){
				 if(extras.params) extras.params = Object.assign(extras.params,parameters);
				 options = Object.assign(options,extras);
			}

			this.log('Options Requested:',options);

			if(!this.isCaching() || uncached === true ) return rq(options);

			let options_string = JSON.stringify(options);
			let cached_response = this.cache.get(options_string);

			if(cached_response === undefined){
					this.cache.put(options_string,rq(options));
					return this.cache.get(options_string);
			}else{
				return cached_response;
			}

		}

		/**
		* Authenticate, validate credentials and generates header.
		* @return {String}
		*/
		authenticate(){
			if(!this.cToken || !this.appID) throw new Exception('PublicKey and Customer ID required.');
			return {'Authorization': `bearer ${this.cToken}`, "Client-ID": this.appID, "Content-Type": "application/json", 'Accept': "application/json"};
		}

		/**
		* Starts Debug Mode
		* @return {Null} Activate Logs
		*/
		log(){
			if(this.debug) console.log(...arguments);
		}

}

export {VERSION,VERB,MARKETS};
export default ClientAPI;
