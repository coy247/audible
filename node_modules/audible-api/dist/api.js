'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _client = require('./client');

var _client2 = _interopRequireDefault(_client);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var AudibleAPI = function (_ClientAPI) {
  _inherits(AudibleAPI, _ClientAPI);

  function AudibleAPI() {
    _classCallCheck(this, AudibleAPI);

    return _possibleConstructorReturn(this, Object.getPrototypeOf(AudibleAPI).apply(this, arguments));
  }

  _createClass(AudibleAPI, [{
    key: 'getCategories',


    /**
    * Retrieves a tree of available categories in the MarketPlace. (Marketplace defined by api env)
     * http://platform.audible.com/audible-api/API_GetCategoryById.html
    * @param {String} response_groups
     * @param {Object} extra parameters in the request
    * @return {Promise} Returns the fetched three.
    */
    value: function getCategories(response_groups, options) {
      return this.request('catalog/categories', response_groups, _client.VERB.GET, false, options);
    }

    /**
    * Retrieves All Channels Available in the MarketPlace. (Marketplace defined by api env)
    * http://platform.audible.com/audible-api/API_GetCategoryById.html
    * @param {String} response_groups
    * @param {Object} extra parameters in the request
    * @return {Promise} Returns the fetched categories.
    */

  }, {
    key: 'getChannels',
    value: function getChannels(response_groups) {
      var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];
      var uncached = arguments.length <= 2 || arguments[2] === undefined ? null : arguments[2];

      var param = { root: 'ShortsCurated', categories_num_levels: 2 };
      return this.request('catalog/categories', response_groups, _client.VERB.GET, false, Object.assign(options, { params: param }), uncached);
    }

    /**
    * Retrieves a specific category from the CategorieID Prodived
    * http://platform.audible.com/audible-api/API_GetCategoryById.html
    * @param {String} categorieID
    * @param {String} response_groups
    * @param {Object} extra parameters in the request
    * @return {Promise} Returns the fetched subcategories.
    */

  }, {
    key: 'getCategory',
    value: function getCategory(categorieID, response_groups) {
      var options = arguments.length <= 2 || arguments[2] === undefined ? {} : arguments[2];

      return this.request('catalog/categories/' + categorieID, response_groups, _client.VERB.GET, false, options);
    }

    /**
     * Retrieves specific product information from an asin
     * http://platform.audible.com/audible-api/API_GetProduct.html
     * @param {String} asin
     * @param {String} response_groups
     * @param {Object} extra parameters in the request
     * @return {Promise} Returns the fetched subcategories.
     */

  }, {
    key: 'getProduct',
    value: function getProduct(asin, response_groups, options) {
      //response_groups = sku,product_desc,contributors
      return this.request('catalog/products/' + asin, response_groups, _client.VERB.GET, false, options);
    }

    /**
     * Retrieves a collection of products based on the search criteria.
     * http://platform.audible.com/audible-api/API_GetProducts.html
     * @param {Object} search parameters
     * @param {String} response_groups
     * @param {Object} extra parameters in the request
     * @return {Promise} Returns the fetched subcategories.
     */

  }, {
    key: 'searchProducts',
    value: function searchProducts(searchParameters, response_groups) {
      var options = arguments.length <= 2 || arguments[2] === undefined ? {} : arguments[2];

      return this.request('catalog/products', response_groups, _client.VERB.GET, false, Object.assign({ 'params': searchParameters }, options));
    }

    /**
    * Retrieves reviews from an Asin
    * http://platform.audible.com/audible-api/API_GetContentMetadata.html
    * @param {asin} Asin
    * @param {String} Response groups
    * @param {Object} extra parameters in the request
    * @return {Promise} Returns the fetched subcategories.
    */

  }, {
    key: 'getProductReviews',
    value: function getProductReviews(asin, response_groups, options, uncached) {
      return this.request('catalog/products/' + asin + '/reviews', response_groups, _client.VERB.GET, true, options, uncached);
    }

    /**
    * Retrieves books from library purchased from set date. REQUIRES AUTHENTICATION
    * @param {Object} search parameters
    * @return {Promise} Returns the fetched subcategories.
    */

  }, {
    key: 'getLibraryBooks',
    value: function getLibraryBooks(purchaseAfterDate, uncached) {
      //resource,option,parameters,verb,data
      return this.request(null, // as it uses dev server
      null, _client.VERB.GET, true, { url: '' + _client.MARKETS.US + _client.VERSION.dev + '/library/books',
        timeout: 2500,
        params: { purchaseAfterDate: purchaseAfterDate, response_groups: 'media' }
      }, uncached);
    }

    /**
    * Retrieves a collection of products based on the search criteria. REQUIRES AUTHENTICATION
    * http://platform.audible.com/audible-api/API_GetContentLicense.html
    * @param {String} Asin
    * @param {String} DRM Type
    * @param {String} Consumption Type
    * @return {Promise} Returns the fetched subcategories.
    */

  }, {
    key: 'getProductStream',
    value: function getProductStream(asin, drm_type, consumption_type) {
      var drm = drm_type ? drm_type : 'Hls';
      var type = consumption_type ? consumption_type : 'Streaming';

      return this.request('content/' + asin + '/licenserequest', null, _client.VERB.POST, true, { data: JSON.stringify({ "consumption_type": type, "drm_type": drm }) });
    }

    /**
     * Retrieves a collection of products based on the search criteria. REQUIRES AUTHENTICATION
     * http://platform.audible.com/audible-api/API_GetLastPositionHeardAnnotations.html
     * @param {string} Asin
     * @param {Object} search parameters
     * @return {Promise} Returns the fetched subcategories.
     */

  }, {
    key: 'getProductsLastPosition',
    value: function getProductsLastPosition(asin) {
      var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];


      return this.request('annotations/lastpositions', // Action
      null, _client.VERB.GET, // Get Verb
      true, // Required Headers
      Object.assign({ params: { asins: asin } }, options), true);
    }

    /**
    * Retrieves a collection of products based on the search criteria. REQUIRES AUTHENTICATION
     * http://platform.audible.com/audible-api/API_GetContentMetadata.html
     * @param {asin} Asin
    * @param {String} Response groups
     * @param {Object} extra parameters in the request
    * @return {Promise} Returns the fetched subcategories.
    */

  }, {
    key: 'getProductMetadata',
    value: function getProductMetadata(asin, response_groups, options) {
      return this.request('content/' + asin + '/metadata', response_groups, _client.VERB.GET, true, options, true);
    }

    /**
    * Retrieves a collection of products based on the search criteria. REQUIRES AUTHENTICATION
    * http://platform.audible.com/audible-api/API_GetRecommendations.html
    * @param {Object} response parameters
    * @param {Number} number of results
    * @param {Object} extra parameters in the request
    * @return {Promise} Returns the fetched subcategories.
    */

  }, {
    key: 'getProductRecomendations',
    value: function getProductRecomendations(response_groups, results) {
      var options = arguments.length <= 2 || arguments[2] === undefined ? {} : arguments[2];

      return this.request('recommendations', response_groups, _client.VERB.GET, true, Object.assign({ "params": { "num_results": results } }, options), true);
    }

    /**
    * Retrieves a list of similar product to the given product (specified by its ASIN).
    * http://platform.audible.com/audible-api/API_GetRecommendations.html
    * @param {String} Identifier of the product to which similar products will be retrieved.
    * @param {Array} Response Group Definition
    * @param {Object} extra parameters in the request
    * @return {Promise} Returns the fetched subcategories.
    */

  }, {
    key: 'getSimilarProducts',
    value: function getSimilarProducts(asin, response_groups, options, uncached) {
      return this.request('catalog/products/' + asin + '/sims', response_groups, _client.VERB.GET, false, options, uncached);
    }

    /**
    * Retrieves user profile information.
    * @return {Promise} Returns the fetched subcategories.
    */

  }, {
    key: 'getUserProfile',
    value: function getUserProfile() {
      var options = {
        url: "https://api.amazon.com/user/profile"
      };
      return this.request('', null, _client.VERB.GET, true, options);
    }
  }]);

  return AudibleAPI;
}(_client2.default);

exports.default = AudibleAPI;