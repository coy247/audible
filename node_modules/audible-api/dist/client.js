"use strict";

Object.defineProperty(exports, "__esModule", {
	value: true
});
exports.MARKETS = exports.VERB = exports.VERSION = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _axios = require("axios");

var _axios2 = _interopRequireDefault(_axios);

var _felix = require("felix");

var _felix2 = _interopRequireDefault(_felix);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
* Available Versions
*/
var VERSION = {
	"stable": "1.0",
	"dev": "0.0"
};

/**
* Available Environment
*/
var MARKETS = {
	'US': "https://api.audible.com/",
	'UK': "https://api.audible.co.uk/",
	'FR': "https://api.audible.fr/",
	'DE': "https://api.audible.de/",
	'JP': "https://api.audible.co.jp/",
	'IT': "https://api.audible.it/",
	'AU': "https://api.audible.com.au/"
};

/**
* Available Verbs
*/

var VERB = {
	GET: "get",
	POST: "post",
	PUT: "put",
	DELETE: "delete"
};

/**
* @class ClientAPI
* Base for Audible API Client. It implements axios fetcher.
* https://www.npmjs.com/package/axios
* https://github.com/mzabriskie/axios/blob/master/LICENSE
*/

var ClientAPI = function () {
	function ClientAPI(customerID, appID, market, version) {
		_classCallCheck(this, ClientAPI);

		this.cache = _felix2.default.create(customerID);
		this.env = (market || MARKETS.US) + "/" + (version || VERSION.stable) + "/";
		this.cToken = customerID;
		this.appID = appID;
		this.debug = false;
		this.caching = true;
		this.default = {
			"verb": VERB.GET
		};
	}

	_createClass(ClientAPI, [{
		key: "isCaching",
		value: function isCaching() {
			return this.caching;
		}

		/**
  * Async Fetcher
  *
  * @param {String} Action to Perform
  * @param {Object} Response Groups
  * @param {String} Method to Execute
  * @param {Boolean} Authenticate
  * @param {Object} Option parameter to Axios
  * @return {Promise} Object With Status and Data
  */

	}, {
		key: "request",
		value: function request(action, response_groups, verb, authenticate, extras, uncached) {

			var parameters = {};
			if (response_groups) {
				response_groups = response_groups instanceof Array ? response_groups.join(',') : response_groups;
				parameters = { 'response_groups': response_groups };
			}

			var options = { url: this.env + action, method: verb || this.default.verb, timeout: 1500, params: parameters };

			options.headers = { "Content-Type": "application/json", 'Accept': "application/json" };

			if (authenticate) Object.assign(options.headers, this.authenticate());

			if (extras) {
				if (extras.params) extras.params = Object.assign(extras.params, parameters);
				options = Object.assign(options, extras);
			}

			this.log('Options Requested:', options);

			if (!this.isCaching() || uncached === true) return (0, _axios2.default)(options);

			var options_string = JSON.stringify(options);
			var cached_response = this.cache.get(options_string);

			if (cached_response === undefined) {
				this.cache.put(options_string, (0, _axios2.default)(options));
				return this.cache.get(options_string);
			} else {
				return cached_response;
			}
		}

		/**
  * Authenticate, validate credentials and generates header.
  * @return {String}
  */

	}, {
		key: "authenticate",
		value: function authenticate() {
			if (!this.cToken || !this.appID) throw new Exception('PublicKey and Customer ID required.');
			return { 'Authorization': "bearer " + this.cToken, "Client-ID": this.appID, "Content-Type": "application/json", 'Accept': "application/json" };
		}

		/**
  * Starts Debug Mode
  * @return {Null} Activate Logs
  */

	}, {
		key: "log",
		value: function log() {
			var _console;

			if (this.debug) (_console = console).log.apply(_console, arguments);
		}
	}, {
		key: "customerToken",
		get: function get() {
			return this.cToken;
		}
	}, {
		key: "Environment",
		get: function get() {
			return this.env;
		}
	}, {
		key: "applicationID",
		get: function get() {
			return this.appID;
		}
	}]);

	return ClientAPI;
}();

exports.VERSION = VERSION;
exports.VERB = VERB;
exports.MARKETS = MARKETS;
exports.default = ClientAPI;